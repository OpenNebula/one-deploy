---
- name: Install required OS packages
  ansible.builtin.package:
    name: "{{ _common + _specific[ansible_os_family] }}"
  vars:
    _common: [python3-pip]
    _specific:
      Debian: [libvirt-dev, pkg-config, qemu-utils]
      RedHat: [libvirt-devel, pkgconfig, qemu-img]
  register: package
  until: package is success
  retries: 12
  delay: 5

- name: Install required python packages
  ansible.builtin.pip:
    name: [libvirt-python, lxml, pycdlib]

- name: List defined VMs
  community.libvirt.virt:
    command: list_vms
  register: defined_vms

- name: Detect Front-end / Infra-VM mappings
  ansible.builtin.set_fact:
    infra_to_frontends: "{{ _infra_to_frontends }}"
  vars:
    # Reversed mapping from an Infra-VM to a list of Front-ends.
    _infra_to_frontends: >-
      {{ dict(_keys | zip(_values)) }}
    _keys: >-
      {{ _grouped | map(attribute=0) }}
    _values: >-
      {{ _grouped | map(attribute=1) | map('map', attribute='key') }}
    _grouped: >-
      {{ _frontends_to_infra | dict2items | groupby('value') }}
    # Simple mapping from a Front-end to an Infra-VM.
    _frontends_to_infra: >-
      {{ dict(_frontends | zip(_frontends | map('extract', hostvars, ['infra_hostname']))) }}
    # NOTE: We deliberately remove existing (defined) VMs as we don't touch them ever again (unless undefined)!
    _frontends: >-
      {{ groups[_frontend_group] | difference(defined_vms.list_vms) }}
    _frontend_group: >-
      {{ frontend_group | d('frontend') }}

- when:
    - infra_to_frontends[inventory_hostname] is defined
    - infra_to_frontends[inventory_hostname] is truthy
  block:
    - name: Create runtime directory
      ansible.builtin.file:
        path: "{{ runtime_dir }}"
        state: directory
        owner: 9869
        group: 9869
        mode: u=rwx,go=

    - block:
        - name: Create temporary dirs
          ansible.builtin.tempfile:
            prefix: "one-deploy.{{ frontend }}."
            state: directory
          loop_control: { loop_var: frontend }
          loop: "{{ infra_to_frontends[inventory_hostname] }}"
          register: tempfile

        - name: Create context.sh files
          ansible.builtin.template:
            dest: "{{ tempfile.results[item].path }}/context.sh"
            src: context.sh.j2
            owner: 0
            group: 0
            mode: u=rw,go=
          vars:
            frontend: "{{ tempfile.results[item].frontend }}"
            context: "{{ hostvars[tempfile.results[item].frontend].context }}"
          loop: "{{ range(tempfile.results | count) }}"

        - name: Create context ISO images
          community.general.iso_create:
            dest_iso: "{{ runtime_dir }}/{{ frontend }}.iso"
            src_files:
              - "{{ tempfile.results[item].path }}/context.sh"
            vol_ident: CONTEXT
            joliet: 3
            rock_ridge: 1.09
          vars:
            frontend: "{{ tempfile.results[item].frontend }}"
          loop: "{{ range(tempfile.results | count) }}"

        - name: Update context ISO image permissions
          ansible.builtin.file:
            path: "{{ runtime_dir }}/{{ frontend }}.iso"
            owner: 9869
            group: 9869
            mode: u=r,go=
          vars:
            frontend: "{{ tempfile.results[item].frontend }}"
          loop: "{{ range(tempfile.results | count) }}"

      always:
        - name: Delete temporary dirs
          ansible.builtin.file:
            path: "{{ item }}"
            state: absent
          loop: "{{ tempfile.results | map(attribute='path') }}"

    - name: Download OS image
      ansible.builtin.get_url:
        url: "{{ os_image_url }}"
        dest: "{{ runtime_dir }}/{{ os_image_url | basename }}"

    - name: Clone OS image
      ansible.builtin.copy:
        dest: "{{ runtime_dir }}/{{ frontend }}.qcow2"
        src: "{{ runtime_dir }}/{{ os_image_url | basename }}"
        remote_src: true
        owner: 9869
        group: 9869
        mode: u=rw,go=
        force: false
      loop_control: { loop_var: frontend }
      loop: "{{ infra_to_frontends[inventory_hostname] }}"

    - name: Try to resize cloned OS images
      ansible.builtin.shell:
        cmd: qemu-img resize '{{ runtime_dir }}/{{ frontend }}.qcow2' '{{ os_image_size }}'
      loop_control: { loop_var: frontend }
      loop: "{{ infra_to_frontends[inventory_hostname] }}"
      ignore_errors: true # NOTE: This is a best effort operation.

    - name: Compute VNC ports
      ansible.builtin.set_fact:
        frontends_to_vnc_ports: >-
          {{ dict(_frontends | zip(_ports)) }}
      vars:
        _ports: >-
          {{ range(vnc_max_port, vnc_max_port - (_frontends | count), -1) }}
        _frontends: >-
          {{ groups[_frontend_group] }}
        _frontend_group: >-
          {{ frontend_group | d('frontend') }}

    - name: Define Front-end VMs
      community.libvirt.virt:
        command: define
        xml: "{{ lookup('template', 'frontend.xml.j2') }}"
        autostart: true
      vars:
        context: "{{ hostvars[frontend].context }}"
      loop_control: { loop_var: frontend }
      loop: "{{ infra_to_frontends[inventory_hostname] }}"

    - name: Start Front-end VMs
      community.libvirt.virt:
        name: "{{ frontend }}"
        state: running
      loop_control: { loop_var: frontend }
      loop: "{{ infra_to_frontends[inventory_hostname] }}"

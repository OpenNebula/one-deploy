---
- ansible.builtin.include_tasks:
    file: "{{ role_path }}/tasks/ha.yml"
  when: use_ha is true

- ansible.builtin.include_tasks:
    file: "{{ role_path }}/tasks/solo.yml"
  when: use_ha is false

- ansible.builtin.include_role:
    name: opennebula/leader

- name: Get Zone
  ansible.builtin.shell:
    cmd: onezone show '{{ zone_name }}' --json
    executable: /bin/bash
  changed_when: false
  register: shell

- name: Get ZONE_ID of this Front-end
  ansible.builtin.set_fact:
    zone_id: >-
      {{ _document.ZONE.ID }}
  vars:
    _document: >-
      {{ shell.stdout | from_json }}

- name: Update Zone Endpoint
  ansible.builtin.shell:
    cmd: |
      set +o errexit -o pipefail
      TEMPLATE="$(mktemp)"
      tee "$TEMPLATE"
      cat "$TEMPLATE" | onezone update '{{ zone_name }}' -a "$TEMPLATE"; RC="$?"
      rm -f "$TEMPLATE"
      exit "$RC"
    stdin: |
      {{ _update | opennebula.deploy.to_one }}
    executable: /bin/bash
  changed_when: true
  when:
    - _update | opennebula.deploy.to_one
      !=
      _template | opennebula.deploy.to_one
  vars:
    _document: >-
      {{ shell.stdout | from_json }}
    _template: >-
      {{ _document.ZONE.TEMPLATE }}
    _update:
      ENDPOINT: >-
        http://{{ one_vip | d(hostvars[leader].ansible_host) }}:2633/RPC2

- name: Configure oned (FEDERATION/MODE,ZONE_ID)
  opennebula.deploy.cfgtool:
    dest: /etc/one/oned.conf
    parser: One
    actions:
      - put:
          path: [FEDERATION, MODE]
          value: '"MASTER"'
      - put:
          path: [FEDERATION, ZONE_ID]
          value: '{{ zone_id }}'
  register: cfgtool

- when: cfgtool is changed
  block:
    - name: Restart OpenNebula (NOW)
      ansible.builtin.service:
        name: opennebula
        state: restarted

    - ansible.builtin.include_role:
        name: opennebula/leader

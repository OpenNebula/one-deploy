---
- name: Set oneadmin's password if provided
  ansible.builtin.copy:
    dest: /var/lib/one/.one/one_auth
    owner: 9869 # oneadmin
    group: 9869 # oneadmin
    mode: u=rw,g=r,o=
    content: "oneadmin:{{ one_pass }}"
    backup: true
  when: one_pass is defined and one_pass is truthy

- name: Configure oned (DB + ONEGATE_ENDPOINT)
  opennebula.deploy.cfgtool:
    dest: /etc/one/oned.conf
    parser: One
    actions: "{{ item.actions }}"
  no_log: "{{ item.no_log | d(false) }}"
  loop: "{{ _items }}"
  vars:
    _items:
      - actions:
          - put:
              path: [DB, BACKEND]
              value: '"{{ db_backend_types[db_backend] }}"'
          - put:
              path: [DB, SERVER]
              value: '"localhost"'
          - put:
              path: [DB, PORT]
              value: 0
          - put:
              path: [DB, USER]
              value: '"{{ db_owner }}"'
          - put:
              path: [DB, DB_NAME]
              value: '"{{ db_name }}"'
          - put:
              path: [ONEGATE_ENDPOINT]
              value: '"{{ _gate_endpoint }}"'
      - actions:
          - put:
              path: [DB, PASSWD]
              value: '"{{ db_password }}"'
        no_log: true
    _gate_endpoint: >-
      {{ gate_endpoint | d(_default) }}
    _default: >-
      {{ 'http://' ~ (one_vip | d(_host)) ~ ':5030' }}
    _host: >-
      {{ hostvars[federation.groups.frontend[0]].ansible_host }}
  notify:
    - Restart OpenNebula

- name: Workaround potential Libvirt's NFS detection issues
  opennebula.deploy.cfgtool:
    dest: /var/lib/one/remotes/etc/vmm/kvm/kvmrc
    parser: Rc
    actions:
      - put:
          path: [MIGRATE_OPTIONS]
          value: '--unsafe'
  notify:
    - Sync Remotes
  when: unsafe_migrations | bool is true

- name: Handle the keep_empty_bridge VNM setting
  opennebula.deploy.cfgtool:
    dest: /var/lib/one/remotes/etc/vnm/OpenNebulaNetwork.conf
    parser: Yaml
    actions:
      - put:
          path: [":keep_empty_bridge"]
          value: "{{ keep_empty_bridge | bool is true }}"
  notify:
    - Sync Remotes

- when: use_ha is true
  block:
    - name: Configure oned (RAFT)
      opennebula.deploy.cfgtool:
        dest: /etc/one/oned.conf
        parser: One
        actions:
          - put:
              path: [RAFT_LEADER_HOOK, COMMAND]
              value: '"raft/vip.sh"'
          - put:
              path: [RAFT_LEADER_HOOK, ARGUMENTS]
              value: '"leader {{ one_vip_if }} {{ one_vip }}/{{ one_vip_cidr }}"'
          - put:
              path: [RAFT_FOLLOWER_HOOK, COMMAND]
              value: '"raft/vip.sh"'
          - put:
              path: [RAFT_FOLLOWER_HOOK, ARGUMENTS]
              value: '"follower {{ one_vip_if }} {{ one_vip }}/{{ one_vip_cidr }}"'
      notify:
        - Restart OpenNebula

    - name: Configure monitord
      opennebula.deploy.cfgtool:
        dest: /etc/one/monitord.conf
        parser: One
        actions:
          - put:
              path: [NETWORK, MONITOR_ADDRESS]
              value: '"{{ one_vip }}"'
      notify:
        - Restart OpenNebula

- when:
    - sched_drs is defined
    - sched_drs is mapping
  block:
    - name: Check if drs configuration exists
      ansible.builtin.stat:
        path: /etc/one/schedulers/one_drs.conf
        get_attributes: false
        get_checksum: false
        get_mime: false
      register: stat_drs_conf

    # NOTE: Adding global unknown/custom options has no effect!
    - name: Configure drs scheduler
      opennebula.deploy.cfgtool:
        dest: /etc/one/schedulers/one_drs.conf
        parser: Yaml
        actions:
          - when: "{{ sched_drs.DEFAULT_SCHED.SOLVER is defined }}"
            put:
              path: [DEFAULT_SCHED, SOLVER]
              value: "{{ sched_drs.DEFAULT_SCHED.SOLVER | d() }}"

          - when: "{{ sched_drs.DEFAULT_SCHED.SOLVER_PATH is defined }}"
            put:
              path: [DEFAULT_SCHED, SOLVER_PATH]
              value: "{{ sched_drs.DEFAULT_SCHED.SOLVER_PATH | d() }}"

          - when: "{{ sched_drs.PLACE.POLICY is defined }}"
            put:
              path: [PLACE, POLICY]
              value: "{{ sched_drs.PLACE.POLICY | d() }}"

          - when: "{{ sched_drs.PLACE.WEIGHTS is defined }}"
            put:
              path: [PLACE, WEIGHTS]
              value: "{{ sched_drs.PLACE.WEIGHTS | d() }}"

          - when: "{{ sched_drs.OPTIMIZE.POLICY is defined }}"
            put:
              path: [OPTIMIZE, POLICY]
              value: "{{ sched_drs.OPTIMIZE.POLICY | d() }}"

          - when: "{{ sched_drs.OPTIMIZE.MIGRATION_THRESHOLD is defined }}"
            put:
              path: [OPTIMIZE, MIGRATION_THRESHOLD]
              value: "{{ sched_drs.OPTIMIZE.MIGRATION_THRESHOLD | d() }}"

          - when: "{{ sched_drs.OPTIMIZE.WEIGHTS is defined }}"
            put:
              path: [OPTIMIZE, WEIGHTS]
              value: "{{ sched_drs.OPTIMIZE.WEIGHTS | d() }}"

          - when: "{{ sched_drs.PREDICTIVE is defined }}"
            put:
              path: [PREDICTIVE]
              value: "{{ sched_drs.PREDICTIVE | d() }}"

          - when: "{{ sched_drs.MEMORY_SYSTEM_DS_SCALE is defined }}"
            put:
              path: [MEMORY_SYSTEM_DS_SCALE]
              value: "{{ sched_drs.MEMORY_SYSTEM_DS_SCALE | d() }}"

          - when: "{{ sched_drs.DIFFERENT_VNETS is defined }}"
            put:
              path: [DIFFERENT_VNETS]
              value: "{{ sched_drs.DIFFERENT_VNETS | d() }}"
      when: stat_drs_conf.stat.exists is true

- when:
    - sched_rank is defined
    - sched_rank is mapping
  block:
    - name: Check if rank configuration exists
      ansible.builtin.stat:
        path: /etc/one/schedulers/rank.conf
        get_attributes: false
        get_checksum: false
        get_mime: false
      register: stat_rank_conf

    # NOTE: Adding global unknown/custom options has no effect!
    - name: Configure rank scheduler
      opennebula.deploy.cfgtool:
        dest: /etc/one/schedulers/rank.conf
        parser: One
        actions:
          - when: "{{ sched_rank.MEMORY_SYSTEM_DS_SCALE is defined }}"
            put:
              path: [MEMORY_SYSTEM_DS_SCALE]
              value: '{{ sched_rank.MAX_HOST | d() }}'

          - when: "{{ sched_rank.MAX_HOST is defined }}"
            put:
              path: [MAX_HOST]
              value: '{{ sched_rank.MAX_HOST | d() }}'

          - when: "{{ sched_rank.DIFFERENT_VNETS is defined }}"
            put:
              path: [DIFFERENT_VNETS]
              value: '{{ "YES" if (sched_rank.DIFFERENT_VNETS | d(true) | bool) else "NO" }}'

          - when: "{{ sched_rank.DEFAULT_SCHED.POLICY is defined }}"
            put:
              path: [DEFAULT_SCHED, POLICY]
              value: '{{ sched_rank.DEFAULT_SCHED.POLICY | d() }}'

          - when: "{{ sched_rank.DEFAULT_SCHED.RANK is defined }}"
            put:
              path: [DEFAULT_SCHED, RANK]
              value: '"{{ sched_rank.DEFAULT_SCHED.RANK | d() }}"'

          - when: "{{ sched_rank.DEFAULT_DS_SCHED.POLICY is defined }}"
            put:
              path: [DEFAULT_DS_SCHED, POLICY]
              value: '{{ sched_rank.DEFAULT_DS_SCHED.POLICY | d() }}'

          - when: "{{ sched_rank.DEFAULT_DS_SCHED.RANK is defined }}"
            put:
              path: [DEFAULT_DS_SCHED, RANK]
              value: '"{{ sched_rank.DEFAULT_DS_SCHED.RANK | d() }}"'

          - when: "{{ sched_rank.DEFAULT_NIC_SCHED.POLICY is defined }}"
            put:
              path: [DEFAULT_NIC_SCHED, POLICY]
              value: '{{ sched_rank.DEFAULT_NIC_SCHED.POLICY | d() }}'

          - when: "{{ sched_rank.DEFAULT_NIC_SCHED.RANK is defined }}"
            put:
              path: [DEFAULT_NIC_SCHED, RANK]
              value: '"{{ sched_rank.DEFAULT_NIC_SCHED.RANK | d() }}"'

          - when: "{{ sched_rank.LOG.SYSTEM is defined }}"
            put:
              path: [LOG, SYSTEM]
              value: '"{{ sched_rank.LOG.SYSTEM | d() }}"'

          - when: "{{ sched_rank.LOG.DEBUG_LEVEL is defined }}"
            put:
              path: [LOG, DEBUG_LEVEL]
              value: '{{ sched_rank.LOG.DEBUG_LEVEL | d() }}'
      when: stat_rank_conf.stat.exists is true

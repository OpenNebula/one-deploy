---
- name: Set oneadmin's password if provided
  ansible.builtin.copy:
    dest: /var/lib/one/.one/one_auth
    owner: 9869 # oneadmin
    group: 9869 # oneadmin
    mode: u=rw,g=r,o=
    content: "oneadmin:{{ one_pass }}"
    backup: true
  when: one_pass is defined and one_pass is truthy

- name: Configure oned (DB)
  ansible.builtin.replace:
    path: /etc/one/oned.conf
    # NOTE: \s     <- matches also newlines
    #       .      <- does *not* match newlines
    #       [\S\s] <- matches anything (including newlines)
    after: '\nDB *= *\[' # find the start
    regexp: '^[\S\s]*$'  # match anything in between
    before: '\] *\n'     # find the end
    replace: "\n{{ _replace }} "
  vars:
    _replace: |2-
        BACKEND = "{{ db_backend_types[db_backend] }}",
        SERVER  = "localhost",
        PORT    = 0,
        USER    = "{{ db_owner }}",
        PASSWD  = "{{ db_password }}",
        DB_NAME = "{{ db_name }}"
  notify:
    - Restart OpenNebula

# Initial deployment optimization (to reduce number of Leader restarts),
# later this step is repeated in the "gate" role.
- name: Configure oned (ONEGATE_ENDPOINT)
  ansible.builtin.lineinfile:
    path: /etc/one/oned.conf
    regexp: '^[#\s]*ONEGATE_ENDPOINT\s*=.*$'
    line: 'ONEGATE_ENDPOINT = "{{ gate_endpoint }}"'
  notify:
    - Restart OpenNebula

- name: Workaround potential Libvirt's NFS detection issues
  ansible.builtin.lineinfile:
    path: /var/lib/one/remotes/etc/vmm/kvm/kvmrc
    regexp: '^[#\s]*MIGRATE_OPTIONS\s*=.*$'
    line: 'MIGRATE_OPTIONS=--unsafe'
  notify:
    - Sync Remotes
  when: unsafe_migrations | bool is true

- name: Handle the keep_empty_bridge VNM setting
  ansible.builtin.lineinfile:
    path: /var/lib/one/remotes/etc/vnm/OpenNebulaNetwork.conf
    regexp: '^:keep_empty_bridge:.*$'
    line: ':keep_empty_bridge: {{ "true" if keep_empty_bridge | bool is true else "false" }}'
  notify:
    - Sync Remotes

- when: use_ha is true
  block:
    - name: Configure oned (RAFT_LEADER_HOOK)
      ansible.builtin.replace:
        path: /etc/one/oned.conf
        after: "{{ item.after | default(omit) }}"
        regexp: "{{ item.regexp | default(omit) }}"
        before: "{{ item.before | default(omit) }}"
        replace: "{{ item.replace | default(omit) }}"
      loop:
        # Uncomment existing line.
        - regexp: '^# *(RAFT_LEADER_HOOK *=.*)$'
          replace: '\g<1>'
        # NOTE: \s     <- matches also newlines
        #       .      <- does *not* match newlines
        #       [\S\s] <- matches anything (including newlines)
        - after: '\nRAFT_LEADER_HOOK *= *\[' # find the start
          regexp: '^[\S\s]*$'                # match anything in between
          before: '\] *\n'                   # find the end
          replace: "\n{{ _replace }} "
      vars:
        _replace: |2-
            COMMAND   = "raft/vip.sh",
            ARGUMENTS = "leader {{ one_vip_if }} {{ one_vip }}/{{ one_vip_cidr }}"
      notify:
        - Restart OpenNebula

    - name: Configure oned (RAFT_FOLLOWER_HOOK)
      ansible.builtin.replace:
        path: /etc/one/oned.conf
        after: "{{ item.after | default(omit) }}"
        regexp: "{{ item.regexp | default(omit) }}"
        before: "{{ item.before | default(omit) }}"
        replace: "{{ item.replace | default(omit) }}"
      loop:
        # Uncomment existing line.
        - regexp: '^# *(RAFT_FOLLOWER_HOOK *=.*)$'
          replace: '\g<1>'
        # NOTE: \s     <- matches also newlines
        #       .      <- does *not* match newlines
        #       [\S\s] <- matches anything (including newlines)
        - after: '\nRAFT_FOLLOWER_HOOK *= *\[' # find the start
          regexp: '^[\S\s]*$'                  # match anything in between
          before: '\] *\n'                     # find the end
          replace: "\n{{ _replace }} "
      vars:
        _replace: |2-
            COMMAND   = "raft/vip.sh",
            ARGUMENTS = "follower {{ one_vip_if }} {{ one_vip }}/{{ one_vip_cidr }}"
      notify:
        - Restart OpenNebula

    - name: Configure monitord (MONITOR_ADDRESS)
      ansible.builtin.replace:
        path: /etc/one/monitord.conf
        after: '\nNETWORK *= *\['                  # find the start
        regexp: 'MONITOR_ADDRESS( *)= *.*([,\s])$' # match the option
        before: '\] *\n'                           # find the end
        replace: >-
          MONITOR_ADDRESS\g<1>= "{{ one_vip }}"\g<2>
      notify:
        - Restart OpenNebula

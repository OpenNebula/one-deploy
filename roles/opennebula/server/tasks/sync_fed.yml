---
- when: inventory_hostname == federation.groups.frontend[0] # instead of `run_once: true`
  block:
    - name: Stat /var/lib/one/.one/*_auth (fed)
      ansible.builtin.stat:
        path: "{{ item.0 }}"
        get_attributes: false
        get_checksum: true
        get_mime: false
      delegate_to: "{{ item.1 }}"
      loop: "{{ _paths | product(_hosts) }}"
      vars:
        _paths: &_paths
          - /var/lib/one/.one/one_auth
          - /var/lib/one/.one/oneflow_auth
          - /var/lib/one/.one/onegate_auth
          - /var/lib/one/.one/sunstone_auth
        _hosts:
          - "{{ federation.master }}"
          - "{{ inventory_hostname }}"
      register: stat

    - name: Detect if AUTH info has been replicated (fed)
      ansible.builtin.set_fact:
        auth_ok: >-
          {{ _exist_ok and _cksum_ok }}
      vars:
        _exist_ok: >-
          {{ stat.results | map(attribute='stat.exists') | list is all }}
        _cksum_ok: >-
          {{ stat.results | map(attribute='stat')
                          | selectattr('path', 'defined')
                          | map('dict2items')
                          | map('selectattr', 'key', 'in', ['checksum', 'path'])
                          | map('items2dict')
                          | groupby('path')
                          | map('last')
                          | map('unique')
                          | map('count')
                          | unique == [1] }}

    - when: not auth_ok
      always: # noqa key-order[task]
        - &remove_master_tar_gz
          name: Remove master-*.tar.gz (cleanup)
          ansible.builtin.file:
            path: &master_tar_gz "/var/tmp/master-{{ inventory_hostname }}.tar.gz"
            state: absent
      block:
        - delegate_to: "{{ federation.master }}"
          always: # noqa key-order[task]
            - *remove_master_tar_gz
          block:
            - name: Archive AUTH data (fed)
              community.general.archive:
                dest: *master_tar_gz
                path: *_paths
                format: gz
                remove: false
                owner: "{{ federation.master_user }}"
                mode: u=rw,go=

            # NOTE: Artifacts are copied from Front-end to Front-end via RSYNC/SSH *directly*,
            #       please make sure SSH/RSA keys are distributed accordingly (password-less login).
            - name: Distribute AUTH data (fed)
              ansible.posix.synchronize:
                dest: *master_tar_gz
                src: *master_tar_gz
                mode: push
                checksum: true
              become: false

        - name: Unarchive AUTH data into /var/lib/one/.one/ (fed)
          ansible.builtin.unarchive:
            dest: /var/lib/one/.one/
            src: *master_tar_gz
            remote_src: true

    - name: Get DB version info (fed)
      ansible.builtin.shell:
        cmd: |
          onedb version -t '{{ db_backend_types[db_backend] }}' \
                        -u '{{ db_owner }}' \
                        -p '{{ db_password }}' \
                        -d '{{ db_name }}'
        executable: /bin/bash
      changed_when: false
      register: shell
      ignore_errors: true

    - name: Detect if DB has been replicated (fed)
      ansible.builtin.set_fact:
        db_ok: >-
          {{ shell is success }}

    - when: not db_ok
      always: # noqa key-order[task]
        - &remove_db_master_sql_gz
          name: Remove db_master-*.sql.gz (cleanup)
          ansible.builtin.file:
            path: &db_master_sql_gz "/var/tmp/db_master-{{ inventory_hostname }}.sql.gz"
            state: absent
      block:
        - name: Init OpenNebula DB (fed)
          ansible.builtin.shell:
            cmd: /usr/bin/oned --init-db
            executable: /bin/bash
          changed_when: true
          become: true
          become_user: oneadmin

        - delegate_to: "{{ federation.master }}"
          always: # noqa key-order[task]
            - *remove_db_master_sql_gz
          block:
            - name: Create DB backup (fed)
              ansible.builtin.shell:
                cmd: |
                  onedb backup -f --federated \
                                  -t '{{ db_backend_types[db_backend] }}' \
                                  -u '{{ db_owner }}' \
                                  -p '{{ db_password }}' \
                                  -d '{{ db_name }}' '/var/tmp/db_master-{{ inventory_hostname }}.sql'
                executable: /bin/bash
              changed_when: true

            - name: Compress DB backup (fed)
              community.general.archive:
                dest: *db_master_sql_gz
                path: "/var/tmp/db_master-{{ inventory_hostname }}.sql"
                format: gz
                remove: true
                owner: "{{ federation.master_user }}"
                mode: u=rw,go=

            # NOTE: Artifacts are copied from Front-end to Front-end via RSYNC/SSH *directly*,
            #       please make sure SSH/RSA keys are distributed accordingly (password-less login).
            - name: Distribute DB backup (fed)
              ansible.posix.synchronize:
                dest: *db_master_sql_gz
                src: *db_master_sql_gz
                mode: push
                checksum: true
              become: false

        - name: Restore DB backup (fed)
          ansible.builtin.shell:
            cmd: |
              set -o errexit -o pipefail
              zcat '{{ _db_master_sql_gz }}' | onedb restore --federated \
                                                             -t '{{ db_backend_types[db_backend] }}' \
                                                             -u '{{ db_owner }}' \
                                                             -p '{{ db_password }}' \
                                                             -d '{{ db_name }}' /dev/fd/0
            executable: /bin/bash
          changed_when: true
          vars:
            _db_master_sql_gz: *db_master_sql_gz

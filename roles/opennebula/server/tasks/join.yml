---
- name: Enable / Start OpenNebula (NOW)
  ansible.builtin.service:
    name: opennebula
    enabled: true
    state: started

- delegate_to: "{{ leader }}"
  block:
    - &Get_Zone
      name: Get Zone
      ansible.builtin.shell:
        cmd: onezone show '{{ zone_name }}' --json
        executable: /bin/bash
      changed_when: false
      register: shell

    - name: Add this Front-end to current Zone
      ansible.builtin.shell:
        cmd: onezone server-add '{{ zone_name }}' --name '{{ _this }}' --rpc 'http://{{ _this }}:2633/RPC2'
        executable: /bin/bash
      changed_when: true
      when: (_server_pool is falsy) or (_this not in _node_names)
      vars: &vars
        _document: >-
          {{ shell.stdout | from_json }}
        _server_pool: >-
          {{ _document.ZONE.SERVER_POOL }}
        _node_names: >-
          {{ [_server_pool.SERVER] | flatten | map(attribute='NAME') | list }}
        _this: >-
          {{ follower | d(inventory_hostname) }}
      register: result
      until: result is success
      retries: 3
      delay: 5

    - <<: *Get_Zone

- name: Get SERVER_ID of this Front-end
  ansible.builtin.set_fact:
    # NOTE: Each Front-end is identified via *unique* SERVER_ID.
    server_id: >-
      {{ ([_server_pool.SERVER] | flatten
                                | selectattr('NAME', '==', _this)
                                | first).ID }}
  when: _server_pool is truthy
  vars: *vars

- name: Configure oned (FEDERATION/SERVER_ID)
  ansible.builtin.replace:
    path: /etc/one/oned.conf
    after: '\nFEDERATION *= *\[' # find the start
    regexp: "{{ item.regexp }}"  # match the option
    before: '\] *\n'             # find the end
    replace: "{{ item.replace }}"
  loop:
    - regexp: 'SERVER_ID( *)= *.*([,\s])$'
      replace: >-
        SERVER_ID\g<1>= {{ server_id }}\g<2>
  register: replace

- name: Restart OpenNebula (NOW)
  ansible.builtin.service:
    name: opennebula
    state: restarted
  when: replace is changed

---
- name: Guess the Leader
  ansible.builtin.set_fact:
    leader: >-
      {{ one_vip | d(federation.groups.frontend[0]) }}

- block:
    - name: Decrement the retry counter
      ansible.builtin.set_fact:
        retry_no: >-
          {{ retry_no | d(6, true) | int - 1 }}

    # When delegate_to's argument is unreachable, then a fatal error
    # is thrown. It seems this error cannot be rescued in block/rescue/always,
    # thus we need to check if the Leader is reachable before delegating.
    - name: Ping the Leader
      ansible.builtin.wait_for:
        host: "{{ hostvars[leader].ansible_host | d(leader) }}"
        port: "{{ ping_port | int }}"
        timeout: 10

    # This check makes sense only when HA mode is enabled.
    - when: (federation.groups.frontend | count > 1)
            or
            (force_ha | bool is true)
      block:
        # NOTE: This is needed to handle custom ansible_user when argument
        #       of delegate_to is the same as one_vip. If it's not defined
        #       in the inventory, then Ansible ignores remote_user and takes
        #       whatever is considered default (which in general may be incorrect!).
        #       Here we assume that all Front-ends in the group can be accessed
        #       uniformly with the same user.
        - name: Dynamically add ungrouped inventory host to represent the Leader
          ansible.builtin.add_host:
            name: "{{ _federation.group_name }}-leader"
            ansible_host: "{{ hostvars[_leader].ansible_host | d(_leader) }}"
            ansible_user: "{{ hostvars[_federation.groups.frontend[0]].ansible_user }}"
          changed_when: false
          when: _leader is defined
          vars:
            _leader: "{{ hostvars[item].leader }}"
            _federation: "{{ hostvars[item].federation }}"
          loop: "{{ play_hosts }}"

        - name: Get Zone
          ansible.builtin.shell:
            cmd: onezone show '{{ zone_name }}' --json
            executable: /bin/bash
          changed_when: false
          register: shell
          delegate_to: "{{ federation.group_name }}-leader"

        - name: Detect if the Leader is there
          ansible.builtin.set_fact:
            # Make sure the Leader isn't specifically the VIP, but
            # rather use its inventory_hostname (or the "SERVER[x].NAME").
            # This helps later when dealing with OneGate/OneFlow
            # services (that's because OneGate/OneFlow services running not
            # on the Leader are automatically deactivated).
            # NOTE: d() prevents the syntax error, when the _leader list is empty.
            leader: >-
              {{ _leader[0].NAME | d() }}
          failed_when: _server_pool is truthy and _leader is falsy
          vars:
            _document: >-
              {{ shell.stdout | from_json }}
            _server_pool: >-
              {{ _document.ZONE.SERVER_POOL }}
            _peers: >-
              {{ [_server_pool.SERVER] | flatten | list }}
            _leader: >-
              {{ _peers | selectattr('STATE', '==', '3') | list }}
  rescue:
    - name: Abort after timeout
      ansible.builtin.fail:
      when: retry_no | int == 0

    - name: Pause for 10 seconds
      ansible.builtin.pause:
        seconds: 10

    - name: Continue the retry loop
      ansible.builtin.include_tasks:
        file: "{{ role_path }}/tasks/main.yml"

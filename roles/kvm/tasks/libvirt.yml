---
- name: Ensure each libvirtd uses distinct UUID
  ansible.builtin.lineinfile:
    path: /etc/libvirt/libvirtd.conf
    regexp: '^[#\s]*host_uuid\s*=.*$'
    line: 'host_uuid = "{{ inventory_hostname | to_uuid }}"'
  register: lineinfile

- name: Restart libvirtd (NOW)
  ansible.builtin.service:
    name: libvirtd
    state: restarted
  when: lineinfile is changed

- name: Disable Libvirt's default network (optional)
  ansible.builtin.shell:
    cmd: |
      set -o errexit
      if virsh net-dumpxml default; then
        virsh net-destroy default ||:
        virsh net-autostart default --disable
      fi
    executable: /bin/bash
  changed_when: false
  when: disable_default_net | bool is true

- name: Query raw status of virtqemud.service
  ansible.builtin.systemd:
    name: virtqemud.service
  register: systemd_virtqemud
  no_log: true

# NOTE: OpenNebula cannot deal with socket-activated Libvirt (yet),
#       so the socket activation *MUST* be disabled.
- when: systemd_virtqemud.status.LoadState not in ['masked', 'not-found']
  block:
    - name: Mask virtqemud* units and libvirtd* sockets
      ansible.builtin.systemd:
        name: "{{ item }}"
        enabled: false
        masked: true
        state: stopped
      register: result
      failed_when:
        - result is failed
        - result.status.LoadState is defined and result.status.LoadState != 'not-found'
      loop:
        - virtqemud.service
        - virtqemud.socket
        - virtqemud-admin.socket
        - virtqemud-ro.socket

    - name: Create /etc/systemd/system/libvirtd.service.d/
      ansible.builtin.file:
        path: /etc/systemd/system/libvirtd.service.d/
        state: directory
        mode: u=rwx,go=rx

    - name: Override libvirtd.service
      ansible.builtin.copy:
        dest: /etc/systemd/system/libvirtd.service.d/override.conf
        mode: u=rw,go=r
        content: "[Service]\nEnvironment=LIBVIRTD_ARGS=\"{{ libvirtd_args }}\""
      register: copy

    - name: Restart libvirtd (NOW)
      ansible.builtin.systemd:
        name: libvirtd
        daemon_reload: true
        enabled: true
        state: restarted
      when: copy is changed

    - name: Check if virsh errors out
      ansible.builtin.shell:
        cmd: virsh -r -c qemu:///system capabilities
        executable: /bin/bash
      changed_when: false
      register: shell
      ignore_errors: true

    - name: Delete stale virtqemud* sockets (fix)
      ansible.builtin.file:
        path: "{{ item }}"
        state: absent
      loop:
        - /var/run/libvirt/virtqemud-admin-sock
        - /var/run/libvirt/virtqemud-sock
        - /var/run/libvirt/virtqemud-sock-ro
      when: shell is failed

- when: ansible_os_family == 'Debian'
  block:
    - name: Check if AppArmor configuration exists
      ansible.builtin.stat:
        path: /etc/apparmor.d/abstractions/libvirt-qemu
        get_attributes: false
        get_checksum: false
        get_mime: false
      register: stat

    - when: stat.stat.exists is true
      block:
        - name: Add permissions to AppArmor
          ansible.builtin.lineinfile:
            dest: /etc/apparmor.d/abstractions/libvirt-qemu
            line: "{{ item }}"
          loop:
            - "  /srv/** rwk,"
            - "  /var/lib/one/datastores/** rwk,"
          register: lineinfile

        - name: Reload apparmor
          ansible.builtin.service:
            name: apparmor
            state: reloaded
          register: result
          failed_when:
            - result is failed
            - result.msg is not contains("find")
            - result.msg is not contains("found")
          when: lineinfile is changed

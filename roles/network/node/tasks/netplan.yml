---
- block: &collect
    - name: Find all Netplan configs
      ansible.builtin.find:
        paths: /etc/netplan/
        patterns: '*.yaml'
      register: find

    - name: Slurp all Netplan configs
      ansible.builtin.slurp:
        path: "{{ item }}"
      loop: >-
        {{ find.files | map(attribute='path') | list | sort }}
      register: slurp

    - name: Parse all Netplan configs
      ansible.builtin.set_fact:
        netplan_cfg: >-
          {{ ({} | combine(*_documents, recursive=true)).network | default({}) }}
      vars:
        _documents: >-
          {{ slurp.results | map(attribute='content')
                           | map('b64decode')
                           | map('from_yaml')
                           | list }}

- name: Decide if bridge should be created
  ansible.builtin.set_fact:
    should_create_bridge: >-
      {{ (netplan_cfg.version is undefined or netplan_cfg.version | int == 2)
         and
         netplan_cfg.ethernets[_phydev] is defined
         and
         netplan_cfg.bridges[_bridge] is undefined }}

- when: should_create_bridge is true
  block:
    - name: Produce new Netplan config
      ansible.builtin.set_fact:
        netplan_cfg_new: >-
          {{ _network | from_yaml }}
      vars:
        _network: |
          version: 2
          ethernets:
            {{ _phydev }}:
              dhcp4: false
              dhcp6: false
          bridges:
            {{ _bridge }}: {{ netplan_cfg.ethernets[_phydev] | combine({"interfaces": [_phydev]}, recursive=true)
                                                             | to_json }}

    - name: Use Netplan CLI to purge existing config
      ansible.builtin.shell:
        cmd: "{{ item }}"
        executable: /bin/bash
      loop:
        # NOTE: always purge the bridge first!
        - netplan set 'bridges.{{ _bridge }}=null'
        - netplan set 'ethernets.{{ _phydev }}=null'

    - name: Render OpenNebula config for Netplan
      ansible.builtin.copy:
        dest: /etc/netplan/98-opennebula.yaml
        owner: root
        group: root
        mode: u=rw,go=r
        content: |
          ---
          {{ {"network": netplan_cfg_new} | to_yaml(indent=2) }}

    - name: Use Netplan CLI to apply config
      ansible.builtin.shell:
        cmd: "{{ item }}"
        executable: /bin/bash
      loop:
        - netplan apply

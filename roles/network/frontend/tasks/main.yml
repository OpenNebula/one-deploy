---
- ansible.builtin.include_role:
    name: opennebula/leader
  when: leader is undefined

- delegate_to: "{{ leader }}"
  run_once: true
  block:
    - name: Get VNETs
      ansible.builtin.shell:
        cmd: onevnet list --json
        executable: /bin/bash
      register: shell
      changed_when: false

    - name: Parse VNETs
      ansible.builtin.set_fact:
        vn_names_parsed: >-
          {{ _vnets | map(attribute='NAME') | default([]) | list }}
        vn_templates_parsed: >-
          {{ _vnets | map(attribute='TEMPLATE') | default([]) | list }}
        ar_keys_parsed: >-
          {%- set output = [] -%}
          {%- for item in _ar_dict_parsed | dict2items -%}
            {%- for key in item.value.keys() -%}
              {{- output.append([item.key, key]) -}}
            {%- endfor -%}
          {%- endfor -%}
          {{- output -}}
        ar_dict_parsed: >-
          {{ _ar_dict_parsed }}
      vars:
        _document: >-
          {{ shell.stdout | from_json }}
        _vnets: >-
          {{ [_document.VNET_POOL.VNET | default([])] | flatten | list }}
        _ar_dict_parsed: >-
          {%- set output = [] -%}
          {%- for item in _vnets -%}
            {%- set address_ranges = [item.AR_POOL.AR | default([])] | flatten | list -%}
            {{-
                output.append({
                  "key": item.NAME,
                  "value": range(address_ranges | length) | zip(address_ranges)
                                                          | items2dict(key_name=0, value_name=1)
                })
            -}}
          {%- endfor -%}
          {{- output | items2dict -}}

    - name: Update VNETs
      ansible.builtin.shell:
        cmd: |
          set +o errexit
          TEMPLATE="$(mktemp)"
          tee "$TEMPLATE"
          cat "$TEMPLATE" | onevnet update '{{ item }}' "$TEMPLATE"; RC="$?"
          rm -f "$TEMPLATE"
          exit "$RC"
        stdin: |
          {{ _combined | opennebula.deploy.to_one }}
        executable: /bin/bash
      when: _combined | opennebula.deploy.to_one
            !=
            _name_to_template[item] | opennebula.deploy.to_one
      loop: "{{ _existing }}"
      vars:
        _name_to_template: >-
          {{ dict(vn_names_parsed | zip(vn_templates_parsed)) }}
        _existing: >-
          {{ vn_names | intersect(vn_names_parsed) | list }}
        _combined: >-
          {{ _name_to_template[item] | combine(vn_dict[item].template, recursive=true) }}

    - name: Create VNETs
      ansible.builtin.shell:
        cmd: |
          set +o errexit
          TEMPLATE="$(mktemp)"
          tee "$TEMPLATE"
          cat "$TEMPLATE" | onevnet create "$TEMPLATE"; RC="$?"
          rm -f "$TEMPLATE"
          exit "$RC"
        stdin: |
          {{ vn_dict[item].template | combine({"NAME": item}) | opennebula.deploy.to_one }}
        executable: /bin/bash
      loop: "{{ _missing }}"
      vars:
        _missing: >-
          {{ vn_names | difference(vn_names_parsed) | list }}

    - name: Update ARs
      ansible.builtin.shell:
        cmd: |
          set +o errexit
          TEMPLATE="$(mktemp)"
          tee "$TEMPLATE"
          cat "$TEMPLATE" | onevnet updatear '{{ item.0 }}' '{{ item.1 }}' "$TEMPLATE"; RC="$?"
          rm -f "$TEMPLATE"
          exit "$RC"
        stdin: |
          {{ _combined | opennebula.deploy.to_one }}
        executable: /bin/bash
      when: _combined | opennebula.deploy.to_one
            !=
            ar_dict_parsed[item.0][item.1] | opennebula.deploy.to_one
      loop: "{{ _existing }}"
      vars:
        _existing: >-
          {{ ar_keys | intersect(ar_keys_parsed) | list }}
        _combined: >-
          {{ ar_dict_parsed[item.0][item.1] | combine(ar_dict[item.0][item.1], recursive=true) }}

    - name: Create ARs
      ansible.builtin.shell:
        cmd: |
          set +o errexit
          TEMPLATE="$(mktemp)"
          tee "$TEMPLATE"
          cat "$TEMPLATE" | onevnet addar '{{ item.0 }}' "$TEMPLATE"; RC="$?"
          rm -f "$TEMPLATE"
          exit "$RC"
        stdin: |
          {{ {"AR": ar_dict[item.0][item.1]} | opennebula.deploy.to_one }}
        executable: /bin/bash
      loop: "{{ _missing }}"
      vars:
        _missing: >-
          {{ ar_keys | difference(ar_keys_parsed) | list }}

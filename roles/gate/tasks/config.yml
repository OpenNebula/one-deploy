---
- name: Configure OneGate Server (:host)
  ansible.builtin.lineinfile:
    path: /etc/one/onegate-server.conf
    regexp: '^:host:.*$'
    line: ':host: "{{ gate_bind_addr }}"'
  notify:
    - Restart OneGate Server

# NOTE: ONEGATE_ENDPOINT is automatically propagated (as an environment variable)
#       to VMs that are expected to be using OneGate.
- name: Configure oned (ONEGATE_ENDPOINT)
  ansible.builtin.lineinfile:
    path: /etc/one/oned.conf
    regexp: '^[#\s]*ONEGATE_ENDPOINT\s*=.*$'
    line: 'ONEGATE_ENDPOINT = "{{ _endpoint }}"'
  vars:
    _endpoint: >-
      {{ gate_endpoint | d(_default) }}
    _default: >-
      {{ 'http://' ~ (one_vip | d(_host)) ~ ':5030' }}
    _host: >-
      {{ hostvars[federation.groups.frontend[0]].ansible_host }}
  notify:
    - Restart OpenNebula

- when:
    - gate_tproxy is defined
    - gate_tproxy is sequence
  block:
    - name: Check if TProxy is already configured
      ansible.builtin.replace:
        path: /var/lib/one/remotes/etc/vnm/OpenNebulaNetwork.conf
        regexp: "{{ item }}"
      check_mode: true
      # The changed_when condition is simply negated, that way it's
      # possible to achieve the usual/expected idempotence.
      changed_when: not replace.changed
      loop:
        - '^# .* :tproxy: generated by one-deploy$' # -> replace.results.0
        - '^:tproxy:.*$'                            # -> replace.results.1
      register: replace

    - name: Manage TProxy config block
      ansible.builtin.blockinfile:
        path: /var/lib/one/remotes/etc/vnm/OpenNebulaNetwork.conf
        marker: "# {mark} :tproxy: generated by one-deploy"
        block: >-
          {{ {":tproxy": gate_tproxy} | to_nice_yaml(indent=2) }}
      # "when the block (BEGIN) is present or :tproxy: line is absent"
      when: replace.results.0 is not changed
            or
            replace.results.1 is changed
      notify:
        - Sync Remotes

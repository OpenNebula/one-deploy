---
- name: Check if DB backend is supported
  ansible.builtin.assert:
    that: db_backend in db_supported_backends

- name: Install DB packages
  ansible.builtin.package:
    name: "{{ _specific[ansible_os_family][db_backend] }}"
  vars:
    _specific:
      Debian:
        MariaDB: [mariadb-server]
        SQLite: [sqlite3]
      RedHat:
        MariaDB: [mariadb-server]
        SQLite: [sqlite]
  register: package
  until: package is success
  retries: 12
  delay: 5
  tags: [preinstall]

- when: db_backend != 'SQLite'
  block:
    - name: Enable / Start DB service (NOW)
      ansible.builtin.service:
        name: "{{ _name[ansible_os_family][db_backend] }}"
        enabled: true
        state: started
      vars:
        _name:
          Debian:
            MariaDB: mariadb
          RedHat:
            MariaDB: mariadb

    - name: Create DB instance for OpenNebula
      ansible.builtin.shell:
        cmd: "{{ _shell[db_backend].cmd }}"
        stdin: "{{ _shell[db_backend].stdin }}"
        executable: /bin/bash
      become: true
      become_user: "{{ _become_user[db_backend] }}"
      vars:
        _shell:
          MariaDB:
            cmd: mysql
            stdin: |
              CREATE DATABASE IF NOT EXISTS {{ db_name }} CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci;
              GRANT ALL PRIVILEGES ON *.* TO '{{ db_owner }}'@'%' IDENTIFIED BY '{{ db_password }}';
              GRANT ALL PRIVILEGES ON *.* TO '{{ db_owner }}'@'localhost' IDENTIFIED BY '{{ db_password }}';
              SET GLOBAL TRANSACTION ISOLATION LEVEL READ COMMITTED;
        _become_user:
          MariaDB: root
      changed_when: false

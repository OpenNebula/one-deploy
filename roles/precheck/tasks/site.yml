---
- name: Check ansible version
  ansible.builtin.assert:
    that: ansible_version.full is version('2.14.0', '>=')
    msg: Please use ansible version >= 2.14.0.
  run_once: true

- name: Ensure correct type for critical vars
  ansible.builtin.assert:
    that:
      - context.PASSWORD is undefined or context.PASSWORD is string
                                      or context.PASSWORD | type_debug == 'AnsibleVaultEncryptedUnicode'
      - one_pass is undefined or one_pass is string
                              or one_pass | type_debug == 'AnsibleVaultEncryptedUnicode'
                              or one_pass is none
      - one_token is undefined or one_token is string
                               or one_token | type_debug == 'AnsibleVaultEncryptedUnicode'
      - one_version is string
    msg: Please make sure [context.PASSWORD, one_pass, one_token, one_version] are valid strings.

- name: Validate passwords strength
  ansible.builtin.assert:
    that: "{{ _items[item].that }}"
    fail_msg: >
      Password validation failed for "{{ item }}".
      {{ _items[item].fail_msg }}
  loop: "{{ _items.keys() | list }}"
  vars:
    _items:
      one_pass:
        condition: "{{ one_pass is defined }}"
        that:
          - one_pass | length > 0
          - not (one_pass | regex_search('[ \t\n\v\f\r]'))
          - one_pass not in ['opennebula', 'password']
        fail_msg: >
          Ensure the password meets the following criteria:
          - Must not be empty
          - Must not contain whitespace characters
          - Must not be trivial, one of ['opennebula', 'password']
      context.PASSWORD:
        condition: "{{ context is defined and context.PASSWORD is defined }}"
        that:
          - context.PASSWORD | length >= 8
          - context.PASSWORD | regex_search('[A-Z]')
          - context.PASSWORD | regex_search('[a-z]')
          - context.PASSWORD | regex_search('[0-9]')
          - context.PASSWORD | regex_search('[!@#$%^&*(),.?":{}|<>]')
        fail_msg: >
          Ensure the password meets the following criteria:
          - At least 8 characters long
          - Contains at least one uppercase letter
          - Contains at least one lowercase letter
          - Contains at least one digit
          - Contains at least one special character
  when:
    - prod_env | d(false) | bool is true
    - _items[item].condition

- name: Check if one_vip/force_ha settings are valid
  ansible.builtin.assert:
    that: ((one_vip is defined) and ((_frontend_count | int > 1) or (_force_ha is true)))
          or
          ((one_vip is undefined) and ((_frontend_count | int == 1) and (_force_ha is false)))
    msg: Please either define one_vip in the inventory, add more Frontends or enable force_ha.
  vars:
    _frontend_count: >-
      {{ federation.groups.frontend | count }}
    _force_ha: >-
      {{ force_ha | d(false) | bool }}

- name: Check if all vip related settings are provided
  ansible.builtin.assert:
    that: ((one_vip is defined) and (one_vip_cidr is defined) and (one_vip_if is defined))
          or
          ((one_vip is undefined) and (one_vip_cidr is undefined) and (one_vip_if is undefined))
    msg: Please either define all or undefine all one_vip, one_vip_cidr, one_vip_if vars.

- name: Check if Prometheus can be enabled (one_token)
  ansible.builtin.assert:
    that: (features.prometheus | bool is false)
          or
          (one_version is version('6.10', '>='))
          or
          (one_token is defined and one_token is truthy)
    msg: Please either disable the Prometheus feature or provide one_token.
  run_once: true

- name: Check if Prometheus can be enabled (one_version)
  ansible.builtin.assert:
    that: (features.prometheus | bool is false)
          or
          (one_version is version('6.6', '>='))
    msg: Please either disable the Prometheus feature or use OpenNebula version >= 6.6.
  run_once: true

- name: Check if Prometheus can be enabled (federation)
  ansible.builtin.assert:
    that: (features.prometheus | bool is false)
          or
          (one_version is version('6.8.2', '>'))
          or
          ((groups[_federation_group] is undefined)
          and
          (groups[_frontend_group ~ '0'] is undefined)
          and
          ((force_master is undefined) or (force_master | bool is false)))
    msg: Prometheus provisioning has been *temporarily* disabled for federated environments.
  vars:
    _federation_group: "{{ federation_group | d('federation') }}"
    _frontend_group: "{{ frontend_group | d('frontend') }}"

- name: Check if legacy OneGate Proxy has been requested
  ansible.builtin.assert:
    that: features.gateproxy is undefined
    msg: Legacy OneGate Proxy support has been removed.
  run_once: true

- name: Check if distro family is supported
  ansible.builtin.assert:
    that: ansible_os_family in {{ _supported }}
  vars:
    _supported:
      - Debian
      - RedHat

- name: Check if distro is supported
  ansible.builtin.assert:
    that: ansible_distribution in {{ _supported }}
  vars:
    _supported:
      - AlmaLinux
      - Debian
      - RedHat
      - Ubuntu

- name: Check if node_hv is supported
  ansible.builtin.assert:
    that: (node_hv is undefined)
          or
          (node_hv | lower in {{ _supported }})
    msg: Please use one of the supported hypervisors {{ _supported }}.
  vars:
    _supported:
      - kvm
      - qemu

- name: Prevent FRR deployment in the parallel federation deployment mode
  ansible.builtin.assert:
    that: (features.evpn is undefined)
          or
          (features.evpn | bool is false)
          or
          (groups[_frontend_group ~ '0'] is undefined)
    msg: Please use sequential federation deployment mode if you want to use FRR/EVPN.
  vars:
    _frontend_group: "{{ frontend_group | d('frontend') }}"
  run_once: true

- name: Check if DB backend is supported for the HA setup
  ansible.builtin.assert:
    that: ((_frontend_count | int == 1) and (_force_ha is false))
          or
          (db_backend | d('MariaDB') != 'SQLite')
    msg: Please use MariaDB as DB backend for HA setup.
  vars:
    _frontend_count: "{{ federation.groups.frontend | count }}"
    _force_ha: "{{ force_ha | d(false) | bool }}"

- name: Check if TProxy is supported
  ansible.builtin.assert:
    that: (gate_tproxy is undefined)
          or
          (gate_tproxy is falsy)
          or
          (one_version is version('6.10.0', '>'))
    msg: Please install OpenNebula > 6.10.0 if you want to use transparent proxies.
  run_once: true

- name: Ensure input TProxy config is correctly structured
  ansible.builtin.assert:
    that: "{{ 0 == (_loop[item].query | flatten | count) }}"
    msg: "{{ _loop[item].msg }}: {{ _loop[item].query | to_json }}"
  loop: "{{ range(_loop | count) }}"
  vars:
    _required: [":service_port", ":remote_addr", ":remote_port"]
    _optional: [":networks"]
    _loop:
      # Look for missing keys.
      - query: >-
          {{ gate_tproxy | map('dict2items')
                         | map('map', attribute='key')
                         | map('symmetric_difference', _required)
                         | map('intersect', _required) }}
        msg: "Missing keys detected"
      # Look for unknown keys.
      - query: >-
          {{ gate_tproxy | map('dict2items')
                         | map('map', attribute='key')
                         | map('difference', _required + _optional) }}
        msg: "Unknown keys detected"
      # Look for empty (invalid) values.
      - query: >-
          {{ gate_tproxy | map('dict2items')
                         | map('selectattr', 'key', 'in', _required)
                         | map('selectattr', 'value', 'falsy')
                         | map('map', attribute='key') }}
        msg: "Empty values detected"
  when:
    - gate_tproxy is defined
    - gate_tproxy is sequence
  run_once: true

- name: Check if Apache Passenger has been requested
  ansible.builtin.assert:
    that:
      - features.passenger is undefined
      - public_fireedge_endpoint is undefined
      - apache2_https is undefined
      - apache2_http is undefined
    msg: Legacy Ruby Sunstone support has been removed in favor of FireEdge Sunstone.
          Apache Passenger is no longer required.
          Only reverse proxying with SSL termination is supported.
          Please use the ssl.web_server (nginx or apache), ssl.key and ssl.certchain variables.
          Use one-deploy version <= 1.2.0 if required.
  run_once: true

- name: Check if using a supported web server
  ansible.builtin.assert:
    that: (ssl is undefined)
          or
          ((ssl.web_server is defined) and (ssl.web_server in ['nginx', 'apache']))
    msg: The only supported web servers are 'apache' and 'nginx'.
  run_once: true

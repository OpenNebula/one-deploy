---
- name: Check ansible version
  ansible.builtin.assert:
    that: ansible_version.full is version('2.14.0', '>=')
    msg: Please use ansible version >= 2.14.0.
  run_once: true

- name: Check if one_vip/force_ha settings are valid
  ansible.builtin.assert:
    that: ((one_vip is defined) and ((_frontend_count | int > 1) or (_force_ha is true)))
          or
          ((one_vip is undefined) and ((_frontend_count | int == 1) and (_force_ha is false)))
    msg: Please either define one_vip in the inventory, add more Frontends or enable force_ha.
  vars:
    _frontend_count: "{{ groups[frontend_group | d('frontend')] | count }}"
    _force_ha: "{{ force_ha | d(false) | bool }}"
  run_once: true

- name: Check if all vip related settings are provided
  ansible.builtin.assert:
    that: ((one_vip is defined) and (one_vip_cidr is defined) and (one_vip_if is defined))
          or
          ((one_vip is undefined) and (one_vip_cidr is undefined) and (one_vip_if is undefined))
    msg: Please either define all or undefine all one_vip, one_vip_cidr, one_vip_if vars.
  run_once: true

- name: Check if Prometheus can be enabled (one_token)
  ansible.builtin.assert:
    that: (features.prometheus | bool is false)
          or
          (one_token is defined and one_token is truthy)
    msg: Please either disable the Prometheus feature or provide one_token.
  run_once: true

- name: Check if Prometheus can be enabled (one_version)
  ansible.builtin.assert:
    that: (features.prometheus | bool is false)
          or
          (one_version is version('6.6', '>='))
    msg: Please either disable the Prometheus feature or use OpenNebula version >= 6.6.
  run_once: true

- name: Check if OneGate Proxy can be enabled (one_version)
  ansible.builtin.assert:
    that: (features.gateproxy | bool is false)
          or
          (one_version is version('6.6', '>='))
    msg: Please either disable the OneGate Proxy feature or use OpenNebula version >= 6.6.
  run_once: true

- name: Check if distro family is supported
  ansible.builtin.assert:
    that: ansible_os_family in {{ _supported }}
  vars:
    _supported:
      - Debian
      - RedHat

- name: Check if distro is supported
  ansible.builtin.assert:
    that: ansible_distribution in {{ _supported }}
  vars:
    _supported:
      - AlmaLinux
      - Debian
      - RedHat
      - Ubuntu

- name: Check if node_hv is supported
  ansible.builtin.assert:
    that: (node_hv is undefined)
          or
          (node_hv | lower in {{ _supported }})
    msg: Please use one of the supported hypervisors {{ _supported }}.
  vars:
    _supported:
      - kvm
      - qemu

- name: Check if Ceph feature is supported for current distro family
  ansible.builtin.assert:
    that: (features.ceph is undefined)
          or
          (features.ceph | bool is false)
          or
          (inventory_hostname not in _hosts)
          or
          ((_repos is defined) and (_repo in _repos))
    msg: Please use one of the supported linux distro families to run Ceph ({{ ansible_distribution }}/{{ ansible_distribution_major_version }}/{{ _repo }} combination is unsupported).
  vars:
    _repo: "{{ ceph.repo | d('distro') }}"
    _repos: "{{ _supported[ansible_distribution][ansible_distribution_major_version] }}"
    _supported:
      Debian:
        '11': [community]
        '10': []
      Ubuntu:
        '22': [distro]
        '20': [community]
      AlmaLinux:
        '8': [distro, community]
        '9': []
      RedHat:
        '8': [community]
        '9': []
    _tmp:
      - "{{ groups[node_group | d('node')] if groups[node_group | d('node')] is defined else [] }}"
    _hosts: "{{ _tmp | flatten | unique }}"
  tags: [preinstall]

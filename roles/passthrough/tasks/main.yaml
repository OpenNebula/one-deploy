---
- name: Run lscpu to gather CPU info
  ansible.builtin.command: "lscpu"
  register: passthrough_cpuinfo
  changed_when: false

- name: Extract CPU Vendor ID (GenuineIntel/AuthenticAMD) and Flags
  ansible.builtin.set_fact:
    passthrough_cpu_vendor_id: "{{ passthrough_cpuinfo.stdout_lines | select('search', '^Vendor ID') | first | regex_replace('^Vendor ID:\\s+', '') | trim }}"
    passthrough_cpu_flags: "{{ passthrough_cpuinfo.stdout_lines | select('search', '^Flags') | first | regex_replace('^Flags:\\s+', '') | trim }}"

- name: Assert CPU supports Hardware virtualization
  ansible.builtin.assert:
    that:
      - _virtualization_flag | length > 0
      - _virtualization_flag in passthrough_cpu_flags
      - _slat_flag in passthrough_cpu_flags
    fail_msg: |
      Virtualization requirements not met. Please ensure:
      - Hardware virtualization ({{ _virtualization_flag }}) is enabled in BIOS/UEFI
      - Extended paging ({{ _slat_flag }}) is enabled in BIOS/UEFI
  vars:
    _virtualization_flag: >-
      {{ 'vmx' if passthrough_cpu_vendor_id == 'GenuineIntel' else
         'svm' if passthrough_cpu_vendor_id == 'AuthenticAMD' else '' }}
    _slat_flag: >-
      {{ 'ept' if passthrough_cpu_vendor_id == 'GenuineIntel' else
         'npt' if passthrough_cpu_vendor_id == 'AuthenticAMD' else '' }}

- name: Check if IOMMU is enabled in CPU
  ansible.builtin.shell:
  args:
    cmd: "set -o pipefail && dmesg | grep -cE \"{{ _iommu_dmesg_pattern }}\""
    executable: /bin/bash
  register: passthrough_iommu_enabled
  changed_when: false
  failed_when: false
  vars:
    _iommu_dmesg_pattern: >-
      {{ 'DMAR: IOMMU enabled|Intel\(R\) Virtualization Technology for Directed I/O' if passthrough_cpu_vendor_id == 'GenuineIntel' else
         'AMD-Vi: Virtual APIC enabled' if passthrough_cpu_vendor_id == 'AuthenticAMD' else '' }}

#### RISK: I MUST assume GRUB is the bootloader being used.

- name: Enable IOMMU in the nodes where necessary
  when: (passthrough_iommu_enabled.stdout | int) > 0
  block:
    - name: Generate GRUB config override file
      ansible.builtin.copy:
        dest: "/etc/default/grub.d/iommu_enable.cfg"
        owner: "root"
        group: "root"
        mode: "0600"
        content: "{{ _file_content }}"
      vars:
        _file_content: >-
          {{ 'GRUB_CMDLINE_LINUX_DEFAULT="$GRUB_CMDLINE_LINUX_DEFAULT intel_iommu=on iommu=pt"'
              if passthrough_cpu_vendor_id == 'GenuineIntel' else
            'GRUB_CMDLINE_LINUX_DEFAULT="$GRUB_CMDLINE_LINUX_DEFAULT iommu=pt"'
            if passthrough_cpu_vendor_id == 'AuthenticAMD' else '' }}

    - name: Update GRUB config
      ansible.builtin.command: grub-mkconfig -o /boot/grub/grub.cfg
      changed_when: false
      notify: Reboot machine

- name: Check again if IOMMU is enabled
  ansible.builtin.shell:
  args:
    cmd: "set -o pipefail && dmesg | grep -cE \"{{ _iommu_dmesg_pattern }}\""
    executable: /bin/bash
  register: passthrough_iommu_enabled
  changed_when: false
  failed_when: false
  vars:
    _iommu_dmesg_pattern: >-
      {{ 'DMAR: IOMMU enabled|Intel\(R\) Virtualization Technology for Directed I/O' if passthrough_cpu_vendor_id == 'GenuineIntel' else
         'AMD-Vi: Virtual APIC enabled' if passthrough_cpu_vendor_id == 'AuthenticAMD' else '' }}

- name: Assert that passthrough/IOMMU is enabled in all hosts
  ansible.builtin.assert:
    that: "{{ (passthrough_iommu_enabled.stdout | int) > 0 }}"
    fail_msg: |
      Passthrough requirements not met.
      Please ensure that your CPU supports IOMMU, and that VT-d or AMD-Vi is enabled from BIOS/UEFI.


### TODO: Igual comprobar remapping. host 13 no tiene.

- name: Import Tasks specific for NVIDIA GPUs
  ansible.builtin.import_tasks:
    file: "{{ role_path }}/tasks/nvidia-gpu.yaml"

echo "vfio" >> /etc/modules
echo "vfio_iommu_type1" >> /etc/modules
echo "vfio_pci" >> /etc/modules
update-initramfs -u -k all
systemctl reboot



# 1. Check cpu architecture, and verify if virtualization is enabled: DONE
#    If disabled, playbook stops
#   - In intel, search flags for vmx and ept
#   - In amd, search flags for svm and npt
#   - If not x86_64, stop playbook, passthrough not supported
# 2. Check cpu architecture, and verify if IOMMU is enabled: DONE
#    If enabled, skip to step 5
#   - Run 'dmesg | grep -i -e DMAR -e IOMMU -e AMD-Vi'
#   - Search for string 'DMAR: IOMMU enabled'
#   - Parse and save lines like "[    1.624973] pci 0000:5d:00.0: Adding to iommu group 0" if they appear.
# 3. Enable IOMMU in the kernel: DONE
#   - For intel, add "intel_iommu=on" to the kernel command line
#   - For amd, add "amd_iommu=on" to the kernel command line (they say its unnecessary, idk)
#   - For both, add "iommu=pt" to the kernel command line (unchecked improvements, but it works)
#   - Study if disabling MSR (Model-Specific Register) due to error doing passthrough to Windows VMs.
#   - Reboot the host
# 4. Identify the device(s) to passthrough. Look only for Nvidia GPUs for now, and store their device ID, vendor ID, and PCI address.
# 5. Validate each passthrough device has a separate IOMMU group. If not, error? the ACS Override Patch?? (MoBo must support it)
# 6. Check if the devices are in use. If so, error
# 7. Check if the devices (and all devices from same IOMMU group) are bound to vfio-pci.
#    If bounded, skip to step 8
#   - Check if the vfio-pci module is loaded. If not, modprobe it
#   - Override the device's default driver with vfio-pci
#   - Blacklist the nouveau/nvidia drivers
#   - Reboot the host
#   - Repeat step
# 8. Add udev rule so that libvirt can use vfio devices
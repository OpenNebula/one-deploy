---
- name: Compute helper facts
  ansible.builtin.set_fact:
    ds_names: >-
      {{ _items | map(attribute='key') | list }}
    ds_dict: >-
      {{ _items | items2dict }}
  vars:
    _ds: >-
      {{ ds_defaults | combine(ds.config | d({}), recursive=true) }}
    _items: >-
      {{ _ds | dict2items
             | map(attribute='value')
             | map('dict2items')
             | flatten
             | rejectattr('value.managed', 'false') }}

- name: Ensure /var/lib/one/datastores/ exists
  ansible.builtin.file:
    path: /var/lib/one/datastores/
    state: directory
    owner: 9869 # oneadmin
    group: 9869 # oneadmin
    mode: u=rwx,g=rx,o=

- name: Setup datastore symlinks
  ansible.builtin.shell:
    cmd: |
      set -o errexit

      if [[ -L '{{ _base_path }}' ]]; then exit 0; fi

      if ! [[ -d '{{ _mount_path }}' ]]; then
        echo "Symlink target does not exist or is not a directory." >&2
        exit 1
      fi

      if [[ -d '{{ _base_path }}' ]] && ! rmdir '{{ _base_path }}'; then exit 1; fi

      if ! ln -s '{{ _mount_path }}' '{{ _base_path }}'; then exit 1; fi

      exit 78
    executable: /bin/bash
  when:
    - inventory_hostname in _hosts
    # NOTE: It doesn't really make sense to symlink /var/lib/one/datastores/,
    #       so we use that as a skip condition.
    - _mount_path != '/var/lib/one/datastores'
    - ds_dict[item].id is defined
  vars:
    # This isn't strictly a "mountpoint" (that's completely irrelevant).
    _mount_path: >-
      {{ ds_dict[item].symlink.src | d('/var/lib/one/datastores/') | normpath }}
    # NOTE: 1. In OpenNebula all user-created datastores start from ID=100.
    #       2. If the ds_dict[item].id refers to an existing datastore, then one-deploy tries to update it (later).
    #       3. If 2. is false, then a new datastore is created using the next available ID (later).
    #       4. If 3. is true, then at this exact point in time one-deploy does *NOT* know the ID.
    #       5. The 'generic' mode has been specifically designed in such a way that reduces code complexity.
    #          Users *MUST* provide the 'id' attribute for each new entry in the 'ds.config' dict
    #          (starting from 100, then incrementing by 1 further down the line).
    _base_path: >-
      /var/lib/one/datastores/{{ ds_dict[item].id }}
    _hosts: >-
      {{ ds_dict[item].symlink.groups | d([])
                                      | map('extract', groups)
                                      | flatten
                                      | unique }}
  register: shell
  changed_when:
    - shell.rc == 78 # EREMCHG "Remote address changed" 8^)
  failed_when:
    - shell.rc != 0 and shell.rc != 78
  loop: "{{ ds_names }}"

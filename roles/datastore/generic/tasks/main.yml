---
- name: Compute helper facts
  ansible.builtin.set_fact:
    ds_names: >-
      {{ _items | map(attribute='key') | list }}
    ds_dict: >-
      {{ _items | items2dict }}
  vars:
    _ds: >-
      {{ ds_defaults | combine(ds.config | default({}), recursive=true) }}
    _items: >-
      {{ _ds | dict2items
             | map(attribute='value')
             | map('dict2items')
             | flatten
             | selectattr('value.managed', 'true')
             | list }}
  run_once: true

- name: Ensure /var/lib/one/datastores/ exists
  ansible.builtin.file:
    path: /var/lib/one/datastores/
    state: directory
    owner: oneadmin
    group: oneadmin
    mode: u=rwx,g=rx,o=

- name: Setup datastore symlinks
  ansible.builtin.shell:
    cmd: |
      set -o errexit

      if [[ -L '{{ _base_path }}' ]]; then exit 0; fi

      if [[ -d '{{ _base_path }}/' ]] && ! rmdir '{{ _base_path }}/'; then exit 1; fi

      if ! ln -s '{{ _mount_path }}/' '{{ _base_path }}'; then exit 1; fi

      exit 78
    executable: /bin/bash
  when: inventory_hostname in _hosts and _mount_path != '/var/lib/one/datastores'
  vars:
    _mount_path: >-
      {{ ds_dict[item].symlink.src | realpath }}
    _base_path: >-
      /var/lib/one/datastores/{{ ds_dict[item].id }}
    _hosts: >-
      {{ ds_dict[item].symlink.groups | map('extract', groups)
                                      | flatten
                                      | unique
                                      | list }}
  loop: "{{ ds_names }}"
  register: shell
  changed_when:
    - shell.rc == 78 # EREMCHG "Remote address changed" 8^)
  failed_when:
    - shell.rc != 0 and shell.rc != 78

- ansible.builtin.include_role:
    name: opennebula/leader
  when: leader is undefined

- when: _target_group == (frontend_group | d('frontend'))
  delegate_to: "{{ leader }}"
  run_once: true
  block:
    - name: Get Datastores
      ansible.builtin.shell:
        cmd: onedatastore list --json
        executable: /bin/bash
      register: shell
      changed_when: false

    - name: Parse Datastores
      ansible.builtin.set_fact:
        ds_names_parsed: >-
          {{ _names }}
        ds_dict_parsed: >-
          {{ dict(_names | zip(_datastores)) }}
      vars:
        _document: >-
          {{ shell.stdout | from_json }}
        _datastores: >-
          {{ [_document.DATASTORE_POOL.DATASTORE | default([])] | flatten | list }}
        _names: >-
          {{ _datastores | map(attribute='NAME') | default([]) | list }}

    - name: Update Datastores
      ansible.builtin.shell:
        cmd: |
          set -o errexit
          {% if ds_dict[item].enabled is defined %}
          onedatastore {{ 'enable' if ds_dict[item].enabled else 'disable' }} '{{ ds_dict[item].id }}'
          {% endif %}
          set +o errexit
          TEMPLATE="$(mktemp)"
          tee "$TEMPLATE"
          onedatastore update '{{ ds_dict[item].id }}' "$TEMPLATE"; RC="$?"
          rm -f "$TEMPLATE"
          exit "$RC"
        stdin: |
          {{ _combined | opennebula.deploy.to_one }}
        executable: /bin/bash
      when: (_combined | opennebula.deploy.to_one != ds_dict_parsed[item].TEMPLATE | opennebula.deploy.to_one)
            or
            (ds_dict[item].enabled is defined and (ds_dict[item].enabled != (ds_dict_parsed[item].STATE | int == 0)))
      loop: "{{ _existing }}"
      vars:
        _existing: >-
          {{ ds_names | intersect(ds_names_parsed) | list }}
        _combined: >-
          {{ ds_dict_parsed[item].TEMPLATE | combine(ds_dict[item].template, recursive=true) }}

    - name: Create Datastores
      ansible.builtin.shell:
        cmd: |
          set +o errexit
          TEMPLATE="$(mktemp)"
          tee "$TEMPLATE"
          onedatastore create "$TEMPLATE"; RC="$?"
          rm -f "$TEMPLATE"
          exit "$RC"
        stdin: |
          {{ ds_dict[item].template | combine({"NAME": item}) | opennebula.deploy.to_one }}
        executable: /bin/bash
      loop: "{{ _missing }}"
      vars:
        _missing: >-
          {{ ds_names | difference(ds_names_parsed) | list }}

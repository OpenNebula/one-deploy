---
- name: Compute facts
  ansible.builtin.set_fact:
    subject_alt_name: "{{ _subject_alt_name | select }}"
    ca_key: "{{ pki.base }}/{{ pki.dirs.key }}/{{ pki.ca.key }}"
    ca_csr: "{{ pki.base }}/{{ pki.dirs.csr }}/{{ pki.ca.csr }}"
    ca_crt: "{{ pki.base }}/{{ pki.dirs.crt }}/{{ pki.ca.crt }}"
    client_key: "{{ pki.base }}/{{ pki.dirs.key }}/{{ pki.client.key }}"
    client_csr: "{{ pki.base }}/{{ pki.dirs.csr }}/{{ pki.client.csr }}"
    client_crt: "{{ pki.base }}/{{ pki.dirs.crt }}/{{ pki.client.crt }}"
    certchain_crt: "{{ pki.base }}/{{ pki.dirs.crt }}/{{ pki.certchain }}"
  vars:
    _subject_alt_name:
      - "{{ ('DNS:' ~ one_fqdn) if (one_fqdn is defined) else '' }}"
      - "{{ ('IP:' ~ one_vip) if (one_vip is defined) else ('IP:' ~ hostvars[leader].ansible_host) }}"

- name: Install required system packages
  ansible.builtin.package:
    name: "{{ _common }}"
  vars:
    _common: [python3-cryptography]
  register: package
  until: package is success
  retries: 12
  delay: 5

- name: Ensure certificate directories exist
  ansible.builtin.file:
    path: "{{ item }}/"
    state: directory
    owner: 0
    group: 0
    mode: u=rwx,go=
  loop:
    - "{{ pki.base }}"
    - "{{ pki.base }}/{{ pki.dirs.key }}"
    - "{{ pki.base }}/{{ pki.dirs.crt }}"
    - "{{ pki.base }}/{{ pki.dirs.csr }}"

- when: inventory_hostname == leader
  block:
    - name: Generate CA private key
      community.crypto.openssl_privatekey:
        path: "{{ ca_key }}"
        type: RSA
        owner: 0
        group: 0
        mode: u=rw,go=

    - name: Check if CA CSR exists
      ansible.builtin.stat:
        path: "{{ ca_csr }}"
        get_attributes: false
        get_checksum: false
        get_mime: false
      register: ca_csr_check

    - name: Generate CA certificate signing request
      community.crypto.openssl_csr:
        path: "{{ ca_csr }}"
        privatekey_path: "{{ ca_key }}"
        basic_constraints:
          - "CA:TRUE"
        key_usage:
          - digitalSignature
          - keyEncipherment
          - keyCertSign
        common_name: ca
        owner: 0
        group: 0
        mode: u=rw,go=
      when: not ca_csr_check.stat.exists

    - name: Generate self-signed CA certificate
      community.crypto.x509_certificate:
        path: "{{ ca_crt }}"
        privatekey_path: "{{ ca_key }}"
        csr_path: "{{ ca_csr }}"
        provider: selfsigned
        owner: 0
        group: 0
        mode: u=rw,go=

    - name: Generate client private key
      community.crypto.openssl_privatekey:
        path: "{{ client_key }}"
        type: RSA
        owner: 0
        group: 0
        mode: u=rw,go=

    - name: Check if client CSR exists
      ansible.builtin.stat:
        path: "{{ client_csr }}"
      register: client_csr_check

    - name: Generate client certificate signing request
      community.crypto.openssl_csr:
        path: "{{ client_csr }}"
        privatekey_path: "{{ client_key }}"
        basic_constraints:
          - "CA:FALSE"
        key_usage:
          - digitalSignature
          - keyEncipherment
        extended_key_usage:
          - serverAuth
          - clientAuth
        subject_alt_name: "{{ subject_alt_name }}"
        common_name: client
        owner: 0
        group: 0
        mode: u=rw,go=
      when: not client_csr_check.stat.exists

    - name: Generate signed client certificate
      community.crypto.x509_certificate:
        path: "{{ client_crt }}"
        csr_path: "{{ client_csr }}"
        ownca_path: "{{ ca_crt }}"
        ownca_privatekey_path: "{{ ca_key }}"
        provider: ownca
        owner: 0
        group: 0
        mode: u=rw,go=

    - name: Combine CA and client certificates into certchain
      ansible.builtin.shell:
        cmd: cat '{{ client_crt }}' '{{ ca_crt }}' > '{{ certchain_crt }}'
        creates: "{{ certchain_crt }}"

- name: Stat CA and client key, cert and csr (ha)
  ansible.builtin.stat:
    path: "{{ item }}"
    get_attributes: false
    get_checksum: true
    get_mime: false
  register: stat
  loop:
    - "{{ ca_key }}"
    - "{{ ca_csr }}"
    - "{{ ca_crt }}"
    - "{{ client_key }}"
    - "{{ client_csr }}"
    - "{{ client_crt }}"
    - "{{ certchain_crt }}"

- name: Synchronize certificates to other nodes
  ansible.posix.synchronize:
    src: "{{ item.path }}"
    dest: "{{ item.path }}"
    recursive: true
    mode: push
    perms: true
  delegate_to: "{{ leader }}"
  loop: "{{ hostvars[leader].stat.results | map(attribute='stat') }}"
  when:
    - inventory_hostname != leader
    - (_follower is undefined) or (item.checksum != _follower.checksum)
  vars:
    _follower: >-
      {{ stat.results | map(attribute='stat')
                      | selectattr('exists', '==', true)
                      | selectattr('path', '==', item.path)
                      | first }}

---
- when: ensure_keys_for is sequence and ensure_keys_for | count > 0
  block:
    - name: Create id_rsa/.pub keypairs
      community.crypto.openssh_keypair:
        path: "~{{ item.1 }}/.ssh/id_rsa"
        type: rsa
        size: "{{ rsa_key_size }}"
        owner: "{{ item.1 }}"
        mode: u=rw,go=
        regenerate: never
        force: false
      loop: >-
        {{ [inventory_hostname] | product(ensure_keys_for) }}
      when:
        - inventory_hostname in federation.groups.frontend
      register: keypair

    - name: Add authorized keys
      ansible.posix.authorized_key:
        user: "{{ item.item.1 }}"
        key: "{{ item.public_key }}"
      loop: "{{ _items }}"
      vars:
        _results: >-
          {{ federation.groups.frontend | map('extract', hostvars, ['keypair', 'results']) | flatten }}
        _items: >-
          {{ _results | map('dict2items')
                      | map('selectattr', 'key', 'in', ['item', 'public_key'])
                      | map('items2dict')
                      | list }}

    # NOTE: This helps to enable AUTH and DB data federation sync without manual interventions.
    - when:
        - federation.role == 'SLAVE'
        - inventory_hostname in federation.groups.frontend # exclude nodes
      block:
        - name: Slurp public keys from the master Front-end
          ansible.builtin.slurp:
            path: "~{{ item }}/.ssh/id_rsa.pub"
          delegate_to: "{{ federation.master }}"
          loop: "{{ ensure_keys_for }}"
          register: slurp

        - name: Add authorized keys (from the master Front-end)
          ansible.posix.authorized_key:
            user: "{{ slurp.results[item].item }}"
            key: "{{ slurp.results[item].content | b64decode | trim }}"
          loop: "{{ range(slurp.results | count) | list }}"
